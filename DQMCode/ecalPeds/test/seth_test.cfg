process testPedOffset = 
{

  include "EventFilter/EcalRawToDigiDev/data/EcalUnpackerMapping.cfi"
  #include "EventFilter/EcalRawToDigiDev/data/EcalUnpackerData.cfi"  

     module ecalEBunpacker = EcalRawToDigiDev{

      untracked string InputLabel="source"

#    by default whole ECAL fedId range is loaded, 600-670.
#    This is in case a selection was needed.
#    fedId==13 is special case for ECAL cosmic stand
#    example 1: all the feds allocated to ECAL DCC's are selected by providing this empty list
#        untracked vint32  FEDs    = { }
#    example 2: fedId used by the DCC at th cosmics stand
#            untracked vint32 FEDs = {13}
#    example 3: fedId used at the best beams (e.g. SM22)
#            untracked vint32 FEDs = {22}

             untracked vint32 FEDs = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35}

# By default these are true  
      untracked bool eventPut               = true 
        untracked bool memUnpacking     = true
        untracked bool headerUnpacking = true 
        untracked bool srpUnpacking       = true
#untracked bool tccUnpacking     = true
        untracked bool feUnpacking         = true
        untracked bool syncCheck           = false 

# Default values 
# untracked uint numbXtalTSamples    = 10
# untracked uint numbTriggerTSamples = 1  

# if no 2 input vectors are specified, hard coded default DCCId:FedId correspondence:
#                                            1:601, 2:602 ...      54:654
# is used
# For special mappings, use the two ordered vectors here below

#  example1:  the same as what loaded
#      untracked vint32 orderedFedList      = {601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
#         619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
#         637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654  }
#      untracked vint32 orderedDCCIdList = {  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,
#        19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
#        37,  38,  39,  40,  41,  42,  43,  44,  45,  46, 47,  48,  49,  50,  51,  52,  53,  54}

#  example2:  special case cosmic stand like (SM-any in EB+01)
# untracked vint32 orderedFedList      = {13}
# untracked vint32 orderedDCCIdList = {28}

#  example3:  special case test beam like (SM-22 in EB+01)
# untracked vint32 orderedFedList      = {22}
# untracked vint32 orderedDCCIdList = {28}

  untracked vint32 orderedFedList =   {1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36}
  untracked vint32 orderedDCCIdList = {28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27}

      untracked bool DoRegional = false
        untracked string FedLabel = "listfeds"

    }


  # analyzer run
  module pedTest = EBPedOffset {
    string digiCollection = 'ebDigis'
    string digiProducer = 'ecalEBunpacker'
    string headerProducer = 'ecalEBunpacker'
    string xmlFile = 'pedOffsets'
    # DB info
    untracked string dbHostName = '0'
    untracked string dbName = '0'
    untracked string dbUserName = 'foo'
    untracked string dbPassword = 'foo'
    int32 run = 100
    string plotting = 'details'
 }

     module header = EcalDCCHeaderDumperModule{
         untracked int32 verbosity = 3
      }                                                                                                       

     module digi = EcalDigiDumperModule{
         untracked int32 verbosity = 3

      # selection on sm number in the barrel (1... 36; 1 with tb unpacker)
      # if not specified or value set to -1, no selection will be applied
         untracked int32 ieb_id      = 25

         untracked bool memErrors    = false
         untracked bool cryDigi      = true
         untracked bool pnDigi       = false
         untracked bool tpDigi       = false

         untracked int32 mode           = 1

      # if mode is 1 specify these parameters
         untracked int32 numChannel     = 10
         untracked int32 numPN          = 2

      # if mode is 2 specify these otherparameters
         untracked vint32  listChannels = { 1000, 1001 }
         untracked vint32  listTowers = { 1 }
         untracked vint32  listPns = { 1, 9 }
     }                                                                                                       


  path p = { ecalEBunpacker , pedTest }

  #path p = { ecalEBunpacker, header, digi}
  #path p = { ecalEBunpacker, pedTest, out}
  #path p = { ecalEBunpacker , header, pedTest }
  #path p = { ecalEBunpacker , header , digi , pedTest}
  #path p = { ecalEBunpacker , digi , pedTest}

  # input
  # all events
   untracked PSet maxEvents = {untracked int32 input = -1}
     #untracked PSet maxEvents = {untracked int32 input = 5}
    source = PoolSource {
      # SM06
      #untracked vstring fileNames = {'file:/data/scooper/data/h4b.00017060.A.0.0.root'}
      # SM12
      #untracked vstring fileNames = {'file:/data/scooper/data/h4b.00014943.A.0.0.root'}
      # SM16
      #untracked vstring fileNames = {'file:/data/scooper/data/h4b.00013428.A.0.0.root'}
      # SM17
      #untracked vstring fileNames = {'file:/data/scooper/data/h4b.00013726.A.0.0.root'}
      
      # All 4 runs (2 lines of files!)
      untracked vstring fileNames = {'file:/data/scooper/data/h4b.00017060.A.0.0.root','file:/data/scooper/data/h4b.00014943.A.0.0.root',
                                     'file:/data/scooper/data/h4b.00013428.A.0.0.root','file:/data/scooper/data/h4b.00013726.A.0.0.root'}
    }

    module out = PoolOutputModule {
      untracked string fileName = 'pedAnaOut.root'
    }

  #   source = DAQEcalTBInputService{
  #             # govoni@cmsmi3
  #             untracked vstring fileNames = { 'file:/data/scooper/data/H4-000018180-SM16-PEDESTAL-OFFSET_SCAN' }
  #             #untracked vstring fileNames = { 'file:/data/govoni/CMSSW/TB/H4-000022132-SM22-PEDESTAL-OFFSET_SCAN'}
  #             # temporary solution for the pre6 only!
  #             # soft link in the current folder beginning with file:
  #             #untracked vstring fileNames = {'file:testpre6'}
  #             untracked bool isBinary = true
  #      }
     service = MessageLogger{
       untracked vstring destinations = { "cout" }
       #untracked vstring categories = { "EcalTBInputService",
       #                                 "EcalTBRawToDigi",
       #                                 "EcalTBRawToDigiTriggerType",
       #                                 "EcalTBRawToDigiTpg",
       #                                 "EcalTBRawToDigiNumTowerBlocks",
       #                                 "EcalTBRawToDigiTowerId",
       #                                 "EcalTBRawToDigiTowerSize",
       #                                 "EcalTBRawToDigiChId",
       #                                 "EcalTBRawToDigiGainZero",
       #                                 "EcalTBRawToDigiGainSwitch",
       #                                 "EcalTBRawToDigiDccBlockSize",
       #                                 "EcalRawToDigiDev",
       #                                 "EcalRawToDigiDevTriggerType",
       #                                 "EcalRawToDigiDevTpg",
       #                                 "EcalRawToDigiDevNumTowerBlocks",
       #                                 "EcalRawToDigiDevTowerId",
       #                                 "EcalRawToDigiDevTowerSize",
       #                                 "EcalRawToDigiDevChId",
       #                                 "EcalRawToDigiDevGainZero",
       #                                 "EcalRawToDigiDevGainSwitch",
       #                                 "EcalRawToDigiDevDccBlockSize",
       #                                 "EcalRawToDigiDevMemBlock",
       #                                 "EcalRawToDigiDevMemTowerId",
       #                                 "EcalRawToDigiDevMemChId",
       #                                 "EcalRawToDigiDevMemGain",
       #                                 "EcalRawToDigiDevTCC",
       #                                 "EcalRawToDigiDevSRP",
       #                                 "EcalBarrelMonitor"
       #                               }
       untracked PSet cout = {
         #untracked string threshold = "DEBUG"
         untracked string threshold = "WARNING"
         #untracked PSet default                        = { untracked int32 limit = 10000000000 }
         #untracked PSet EcalTBInputService             = { untracked int32 limit = 10000000000 }
         #untracked PSet EcalTBRawToDigi                = { untracked int32 limit = 10000000000 }
         #untracked PSet EcalTBRawToDigiTriggerType     = { untracked int32 limit = 10000000000 }
         #untracked PSet EcalTBRawToDigiTpg             = { untracked int32 limit = 10000000000 }
         #untracked PSet EcalTBRawToDigiNumTowerBlocks  = { untracked int32 limit = 10000000000}
         #untracked PSet EcalTBRawToDigiTowerId         = { untracked int32 limit = 10000000000}
         #untracked PSet EcalTBRawToDigiTowerSize       = { untracked int32 limit = 10000000000}
         #untracked PSet EcalTBRawToDigiChId            = { untracked int32 limit = 10000000000}
         #untracked PSet EcalTBRawToDigiGainZero        = { untracked int32 limit = 10000000000}
         #untracked PSet EcalTBRawToDigiGainSwitch      = { untracked int32 limit = 10000000000}
         #untracked PSet EcalTBRawToDigiDccBlockSize    = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDev               = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevTriggerType    = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevTpg            = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevNumTowerBlocks = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevTowerId        = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevTowerSize      = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevChId           = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevGainZero       = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevGainSwitch     = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevDccBlockSize   = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevMemBlock       = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevMemTowerId     = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevMemChId        = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevMemGain        = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevTCC            = { untracked int32 limit = 10000000000}
         #untracked PSet EcalRawToDigiDevSRP            = { untracked int32 limit = 10000000000}
         #untracked PSet EcalBarrelMonitor              = { untracked int32 limit = 10000000000}
         #untracked bool noTimeStamps = true
         #untracked bool noLineBreaks = true
       }
       untracked vstring debugModules = {"*"}
     }
}

